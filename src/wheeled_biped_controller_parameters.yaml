wheeled_biped_controller:
  use_policy: {
    type: bool,
    default_value: true,
    description: 'Whether to take inputs from the policy'
  }

  left_wheel_name: {
    type: string,
    default_value: 'left_wheel',
    description: 'Name of the left wheel joint'
  }
  right_wheel_name: {
    type: string,
    default_value: 'right_wheel',
    description: 'Name of the right wheel joint'
  }
  left_hip_name: {
    type: string,
    default_value: 'left_hip',
    description: 'Name of the left hip joint'
  }
  right_hip_name: {
    type: string,
    default_value: 'right_hip',
    description: 'Name of the right hip joint'
  }
  left_knee_name: {
    type: string,
    default_value: 'left_knee',
    description: 'Name of the left knee joint'
  }
  right_knee_name: {
    type: string,
    default_value: 'right_knee',
    description: 'Name of the right knee joint'
  }

  imu_sensor_name: {
    type: string,
    default_value: 'imu_sensor',
    description: 'Name of the IMU sensor'
  }

  wheel_radius: {
    type: double,
    default_value: 0.1,
    description: 'Radius of the wheel (m)'
  }
  wheel_separation: {
    type: double,
    default_value: 0.281,
    description: 'Distance between the wheels (m)'
  }
  leg_link_length: {
    type: double,
    default_value: 0.225,
    description: 'Length of the leg link (m)'
  }
  z_min: {
    type: double,
    default_value: 0.07814,
    description: 'Minimum standing height of the robot (m)'
  }
  z_max: {
    type: double,
    default_value: 0.275,
    description: 'Maximum standing height of the robot (m)'
  }
  contact_force_threshold: {
    type: double,
    default_value: 5.0,
    description: 'Threshold for the contact force (N)'
  }
  friction_coefficient: {
    type: double,
    default_value: 1.0,
    description: 'Friction coefficient for the wheels'
  }

  hip_kp: {
    type: double,
    default_value: 50.0,
    description: 'Proportional gain for the hip joint (N*m/rad)'
  }
  hip_kd: {
    type: double,
    default_value: 5.0,
    description: 'Derivative gain for the hip joint (N*m*s/rad)'
  }

  wheel_kp: {
    type: double,
    default_value: 0.0,
    description: 'Proportional gain for the wheel joint (N*m/rad)'
  }
  wheel_kd: {
    type: double,
    default_value: 6.0,
    description: 'Derivative gain for the wheel joint (N*m*s/rad)'
  }

  leg_kp: {
    type: double,
    default_value: 0.0,
    description: 'Proportional gain for the leg prismatic joint (N/m)'
  }
  leg_kd: {
    type: double,
    default_value: 6.0,
    description: 'Derivative gain for the leg prismatic joint (N*s/m)'
  }

  yaw_kp: {
    type: double,
    default_value: 1.0,
    description: 'Proportional gain for the yaw controller (N*m/rad)'
  }
  yaw_kd: {
    type: double,
    default_value: 1.0,
    description: 'Derivative gain for the yaw controller (N*m*s/rad)'
  }

  roll_kp: {
    type: double,
    default_value: 0.0,
    description: 'Proportional gain for the roll controller (N*m/rad)'
  }
  roll_kd: {
    type: double,
    default_value: 0.0,
    description: 'Derivative gain for the roll controller (N*m*s/rad)'
  }

  x_kps: {
    type: double_array,
    default_value: [7.0, 7.0],
    description: 'Proportional gains for the balancing controller in the x axis (N*m/m)'
  }
  pitch_kps: {
    type: double_array,
    default_value: [30.0, 30.0],
    description: 'Proportional gains for the balancing controller in the pitch axis (N*m/rad)'
  }
  x_kds: {
    type: double_array,
    default_value: [3.0, 3.0],
    description: 'Derivative gains for the balancing controller in the x axis (N*m*s/m)'
  }
  pitch_kds: {
    type: double_array,
    default_value: [5.0, 5.0],
    description: 'Derivative gains for the balancing controller in the pitch axis (N*m*s/rad)'
  }
  pitch_offsets: {
    type: double_array,
    default_value: [0.0, 0.0],
    description: 'Offsets for the balancing controller in the pitch axis (rad)'
  }
  balancing_gain_heights: {
    type: double_array,
    default_value: [0.07814, 0.3182],
    description: 'Heights for the balancing controller corresponding to the arrays of gains (m)'
  }

  normal_force_filter_alpha: {
    type: double,
    default_value: 0.1,
    description: 'Alpha value for the exponential moving average filter for the normal force'
  }

  max_target_distance: {
    type: double,
    default_value: 0.1,
    description: 'Maximum distance between the target and the current position (m)'
  }

  max_target_velocity: {
    type: double,
    default_value: 0.1,
    description: 'Maximum relative velocity between the target and the current position (m/s)'
  }

  publish_rate: {
    type: double,
    default_value: 50.0,
    description: 'Rate at which to publish the controller state (Hz). Set to 0 to disable publishing.'
  }
  sensor_publish_rate: {
    type: double,
    default_value: 50.0,
    description: 'Rate at which to publish the IMU and odometry messages (Hz). Set to 0 to disable publishing.'
  }